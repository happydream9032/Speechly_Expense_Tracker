[{"/Users/adrianhajdin/Desktop/speechly/src/index.js":"1","/Users/adrianhajdin/Desktop/speechly/src/App.js":"2","/Users/adrianhajdin/Desktop/speechly/src/context/context.js":"3","/Users/adrianhajdin/Desktop/speechly/src/styles.js":"4","/Users/adrianhajdin/Desktop/speechly/src/context/contextReducer.js":"5","/Users/adrianhajdin/Desktop/speechly/src/components/index.js":"6","/Users/adrianhajdin/Desktop/speechly/src/components/InfoCard.jsx":"7","/Users/adrianhajdin/Desktop/speechly/src/components/Details/Details.jsx":"8","/Users/adrianhajdin/Desktop/speechly/src/components/Snackbar/Snackbar.jsx":"9","/Users/adrianhajdin/Desktop/speechly/src/components/Main/Main.jsx":"10","/Users/adrianhajdin/Desktop/speechly/src/components/Main/styles.js":"11","/Users/adrianhajdin/Desktop/speechly/src/components/Snackbar/styles.js":"12","/Users/adrianhajdin/Desktop/speechly/src/components/Main/List/List.jsx":"13","/Users/adrianhajdin/Desktop/speechly/src/components/Main/Form/Form.jsx":"14","/Users/adrianhajdin/Desktop/speechly/src/components/Main/Form/styles.js":"15","/Users/adrianhajdin/Desktop/speechly/src/constants/categories.js":"16","/Users/adrianhajdin/Desktop/speechly/src/utils/formatDate.js":"17","/Users/adrianhajdin/Desktop/speechly/src/components/Main/List/styles.js":"18","/Users/adrianhajdin/Desktop/speechly/src/useTransactions.js":"19","/Users/adrianhajdin/Desktop/speechly/src/components/Details/styles.js":"20"},{"size":415,"mtime":1607165525729,"results":"21","hashOfConfig":"22"},{"size":1394,"mtime":1607332956549,"results":"23","hashOfConfig":"22"},{"size":1999,"mtime":1607165021841,"results":"24","hashOfConfig":"22"},{"size":552,"mtime":1607332981371,"results":"25","hashOfConfig":"22"},{"size":523,"mtime":1607164321029,"results":"26","hashOfConfig":"22"},{"size":212,"mtime":1607164296321,"results":"27","hashOfConfig":"22"},{"size":443,"mtime":1607331225886,"results":"28","hashOfConfig":"22"},{"size":702,"mtime":1607164202271,"results":"29","hashOfConfig":"22"},{"size":754,"mtime":1607164300129,"results":"30","hashOfConfig":"22"},{"size":1235,"mtime":1607331364765,"results":"31","hashOfConfig":"22"},{"size":490,"mtime":1607331633480,"results":"32","hashOfConfig":"22"},{"size":196,"mtime":1607164301831,"results":"33","hashOfConfig":"22"},{"size":1368,"mtime":1607164289293,"results":"34","hashOfConfig":"22"},{"size":5007,"mtime":1607331563393,"results":"35","hashOfConfig":"22"},{"size":235,"mtime":1607164217290,"results":"36","hashOfConfig":"22"},{"size":1660,"mtime":1607165514283,"results":"37","hashOfConfig":"22"},{"size":290,"mtime":1607164324768,"results":"38","hashOfConfig":"22"},{"size":399,"mtime":1607165948884,"results":"39","hashOfConfig":"22"},{"size":1092,"mtime":1607164386898,"results":"40","hashOfConfig":"22"},{"size":237,"mtime":1607164207068,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1gty955",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/adrianhajdin/Desktop/speechly/src/index.js",[],["87","88"],"/Users/adrianhajdin/Desktop/speechly/src/App.js",[],"/Users/adrianhajdin/Desktop/speechly/src/context/context.js",[],"/Users/adrianhajdin/Desktop/speechly/src/styles.js",[],"/Users/adrianhajdin/Desktop/speechly/src/context/contextReducer.js",["89"],"export default (state, action) => {\n  let transactions;\n\n  switch (action.type) {\n    case 'DELETE_TRANSACTION':\n      transactions = state.filter((transaction) => transaction.id !== action.payload);\n\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n\n      return transactions;\n    case 'ADD_TRANSACTION':\n      transactions = [action.payload, ...state];\n\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n\n      return transactions;\n    default:\n      return state;\n  }\n};\n","/Users/adrianhajdin/Desktop/speechly/src/components/index.js",[],"/Users/adrianhajdin/Desktop/speechly/src/components/InfoCard.jsx",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Details/Details.jsx",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Snackbar/Snackbar.jsx",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Main/Main.jsx",["90","91","92"],"import React, { useState, useEffect, useContext } from 'react';\nimport { Card, CardHeader, CardContent, Typography, Grid, Divider } from '@material-ui/core';\nimport { useSpeechContext } from '@speechly/react-client';\nimport { ExpenseTrackerContext } from '../../context/context';\nimport useStyles from './styles';\nimport Form from './Form/Form';\nimport List from './List/List';\nimport InfoCard from '../InfoCard';\n\nconst ExpenseTracker = () => {\n  const classes = useStyles();\n  const { balance } = useContext(ExpenseTrackerContext);\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader title=\"Expense Tracker\" subheader=\"Powered by Speechly\" />\n      <CardContent>\n        <Typography align=\"center\" variant=\"h5\">Total Balance ${balance}</Typography>\n        <Typography variant=\"subtitle1\" style={{ lineHeight: '1.5em', marginTop: '20px' }}>\n          <InfoCard />\n        </Typography>\n        <Divider className={classes.divider} />\n        <Form />\n      </CardContent>\n      <CardContent className={classes.cartContent}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <List />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ExpenseTracker;\n","/Users/adrianhajdin/Desktop/speechly/src/components/Main/styles.js",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Snackbar/styles.js",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Main/List/List.jsx",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Main/Form/Form.jsx",["93"],"import React, { useState, useContext, useEffect } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { BigTranscript } from '@speechly/react-ui';\nimport { useSpeechContext, SpeechState} from '@speechly/react-client';\nimport Snackbar from '../../Snackbar/Snackbar';\nimport formatDate from '../../../utils/formatDate';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport useStyles from './styles';\n\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date()),\n};\n\nconst NewTransactionForm = () => {\n  const classes = useStyles();\n  const { addTransaction } = useContext(ExpenseTrackerContext);\n  const [formData, setFormData] = useState(initialState);\n  const { segment } = useSpeechContext();\n  const [open, setOpen] = React.useState(false);\n  const { speechState } = useSpeechContext();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  useEffect(() => {\n    if (speechState === SpeechState.Recording) {\n      setIsSpeaking(true);\n    } else {\n      setIsSpeaking(false);\n    }\n  }, [speechState]);\n\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\n      setFormData({ ...formData, type: 'Income' });\n    } else if (expenseCategories.map((iC) => iC.type).includes(formData.category)) {\n      setFormData({ ...formData, type: 'Expense' });\n    }\n\n    setOpen(true);\n    addTransaction({ ...formData, amount: Number(formData.amount), id: uuidv4() });\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData, type: 'Expense' });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData, type: 'Income' });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach((s) => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData, amount: s.value });\n            break;\n          case 'category':\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Income', category });\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Expense', category });\n            }\n            break;\n          case 'date':\n            setFormData({ ...formData, date: s.value });\n            break;\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n  return (\n    <Grid container spacing={2}>\n      <Snackbar open={open} setOpen={setOpen} />\n      <Grid item xs={12}>\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n         {isSpeaking ? <BigTranscript /> : 'Start adding transactions'} \n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\n            {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\n      </Grid>\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n    </Grid>\n  );\n};\n\nexport default NewTransactionForm;\n","/Users/adrianhajdin/Desktop/speechly/src/components/Main/Form/styles.js",[],"/Users/adrianhajdin/Desktop/speechly/src/constants/categories.js",[],"/Users/adrianhajdin/Desktop/speechly/src/utils/formatDate.js",["94"],"export default (date) => {\n  const d = new Date(date);\n  let month = `${d.getMonth() + 1}`;\n  let day = `${d.getDate()}`;\n  const year = d.getFullYear();\n\n  if (month.length < 2) { month = `0${month}`; }\n  if (day.length < 2) { day = `0${day}`; }\n\n  return [year, month, day].join('-');\n};\n","/Users/adrianhajdin/Desktop/speechly/src/components/Main/List/styles.js",[],"/Users/adrianhajdin/Desktop/speechly/src/useTransactions.js",[],"/Users/adrianhajdin/Desktop/speechly/src/components/Details/styles.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":1,"nodeType":"101","endLine":20,"endColumn":3},{"ruleId":"102","severity":1,"message":"103","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"106","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"107","line":3,"column":10,"nodeType":"104","messageId":"105","endLine":3,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":90,"column":6,"nodeType":"110","endLine":90,"endColumn":15,"suggestions":"111"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":1,"nodeType":"101","endLine":11,"endColumn":3},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSpeechContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"117","text":"118"},[3260,3269],"[createTransaction, formData, segment]"]